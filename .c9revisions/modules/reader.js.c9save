{"ts":1369820251402,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1369820167413,"patch":[[{"diffs":[[1,"var feedparser = require('feedparser')\r\n    , mongoose = require('mongoose')\r\n    , schema   = require('./schema');\r\n    \r\nmongoose.connect('mongodb://localhost/rssreader');\r\nmongoose.connection.on('error', function(err){\r\n    console.error('error occurred');\r\n    throw err;\r\n});\r\n\r\nfunction Reader(){\r\n}\r\n\r\nReader.test = function(){\r\n  console.log('aaa');  \r\n};\r\n\r\nReader.read = function(){\r\n    feedparser.parseUrl('feeds.gawker.com/gizmodo/full',\r\n        function(error, meta, articles){\r\n            if(error) console.error(error);\r\n            else{\r\n                console.log('%s - %s - %s', meta.title, meta.link, meta.xmlUrl);\r\n                articles.forEach(function(article){\r\n                    console.log(\"%s - %s(%s)\", article.date, article.title, article.link);\r\n                });\r\n            }\r\n        });\r\n};\r\n\r\nReader.save = function(name){\r\n    var db = mongoose.connection;\r\n    db.on('error', console.error.bind(console, 'connection error:'));\r\n    db.once('open', function(){\r\n        var Feed = mongoose.model('Feed');\r\n        var feed = new Feed({name: name});\r\n        feed.save(function(){\r\n            console.log('success');\r\n        });\r\n    });\r\n};\r\n\r\nReader.load = function(callback){\r\n    console.log(\"Call Reader.load\");\r\n    var Feed = mongoose.model('Feed');\r\n    Feed.find(function(err, feeds){\r\n        if(err) throw err;\r\n        else\r\n            callback(feeds);\r\n    });\r\n};\r\n\r\nReader.loadTags = function(callback){\r\n    console.log('/modules/reader.js:Call Reader.loadTags');\r\n    var Tag = mongoose.model('Tag');\r\n    Tag.find(function(err, tags){\r\n        if(err) throw err;\r\n        else\r\n            if(callback !== undefined) callback(tags);\r\n    });\r\n};\r\n\r\nReader.loadFeedTags = function(feedId, callback){\r\n    console.log('/modules/reader.js:Call Reader.loadFeedTags');\r\n    var Feed = mongoose.model('Feed');\r\n    Feed.findOne({_id: new mongoose.Types.ObjectId(feedId)}, function(err, feed){\r\n        if(err) throw err;\r\n        else\r\n            if(callback !== undefined) callback(feed);\r\n    });\r\n};\r\n\r\nReader.addTag = function(tagname, callback){\r\n    console.log('reader.js:Reader.addTag');\r\n    var Tag = mongoose.model('Tag');\r\n    var tag = new Tag({\r\n        name: tagname\r\n    });\r\n    \r\n    tag.save(function(err, t){\r\n        if(err) throw err;\r\n        else{\r\n            console.log('Success to save tag.');\r\n            if(callback !== undefined)\r\n                callback(t);\r\n        }\r\n    });\r\n};\r\n\r\nReader.addFeed = function(url, callback){\r\n    feedparser.parseUrl(url,\r\n        function(error, meta, articles){\r\n            if(error) console.error(error);\r\n            else{\r\n                var Feed = mongoose.model('Feed');\r\n                var feed = new Feed({\r\n                    _id: new mongoose.Types.ObjectId,\r\n                    name: meta.title,\r\n                    link: meta.link,\r\n                    xmlUrl: meta.xmlUrl !== null ? meta.xmlUrl : url\r\n                });\r\n                \r\n                console.log('Add feed. %s - %s - %s', meta.title, meta.link, meta.xmlUrl);\r\n                \r\n                feed.save(function(err, f){\r\n                    if(err) throw err;\r\n                    else{\r\n                        console.log('Success to save feed.');\r\n                        callback(f, articles);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n};\r\n\r\nReader.addArticles = function(feed, articles, callback){\r\n    console.log('reader.js:Reader.addArticles:');\r\n    console.log('articles.length:%s', articles.length);\r\n    var arr = new Array();\r\n    var endCount = 0;\r\n    articles.forEach(function(article){\r\n        var Article = mongoose.model('Article');\r\n        var a = new Article({\r\n            feedId:         feed._id,\r\n            date:           article.date,\r\n            title:          article.title,\r\n            description:    article.description,\r\n            summary:        article.summary,\r\n            link:           article.link\r\n        });\r\n        \r\n        a.save(function(err, a){\r\n            if(err) throw err;\r\n            else{\r\n                arr.push(a);\r\n                endCount++;\r\n                if(endCount == articles.length)\r\n                    if(callback !== undefined)\r\n                        callback(arr);\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\nReader.getFeedArticles = function(feedId, limit, callback){\r\n    console.log('reader.js:Reader.getFeedArticles:feedId=%s', feedId);\r\n    if('number' != typeof limit){\r\n        limit = 30;\r\n    }\r\n    var Article = mongoose.model('Article');\r\n    Article.find({feedId: new mongoose.Types.ObjectId(feedId)})\r\n            .sort({date: 'desc'})\r\n            .limit(limit)\r\n            .exec(callback);\r\n};\r\n\r\nReader.getFeedsArticles = function(feedIds, limit, callback){\r\n    console.log('reader.js:Reader.getFeedArticles:feedIds=%s', feedIds);\r\n    if('number' != typeof limit){\r\n        limit = 30;\r\n    }\r\n    \r\n    var arr = new Array();\r\n    for(var i=0; i<feedIds.length; i++){\r\n        arr.push(feedIds[i]);\r\n    }\r\n    \r\n    var Article = mongoose.model('Article');\r\n    Article.find({feedId: {$in: arr} })\r\n            .sort({date: 'desc'})\r\n            .limit(limit)\r\n            .exec(function(err, articles){\r\n                if(err) throw err;\r\n                else\r\n                    if(callback !== undefined) callback(articles);\r\n            });\r\n};\r\n\r\nReader.getNewArticles = function(feedId, callback){\r\n    var Feed = mongoose.model('Feed');\r\n    Feed.findById(new mongoose.Types.ObjectId(feedId), function(err, feed){\r\n        if(err) throw err;\r\n        else{\r\n            if(feed.xmlUrl !== null)\r\n                feedparser.parseUrl(feed.xmlUrl, function(err, meta, articles){\r\n                    callback(err, meta, articles, feed);\r\n                });\r\n        }\r\n    });\r\n};\r\n\r\nReader.updateFeedTags = function(feedId, feedTags, callback){\r\n    var tags = new Array();\r\n    for(var i=0; i<feedTags.length; i++){\r\n        var t = feedTags[i];\r\n        tags.push(t._id);\r\n    }\r\n    var Feed = mongoose.model('Feed');\r\n    Feed.update(\r\n        {_id: new mongoose.Types.ObjectId(feedId)},\r\n        {feedTags: tags},\r\n        {safe: true},\r\n        function(err, numberAffected, raw){\r\n            if(err) throw err;\r\n            else\r\n               if(callback !== undefined) callback();\r\n        });\r\n};\r\n\r\nReader.getTaggedFeeds = function(tagId, callback){\r\n    var Feed = mongoose.model('Feed');\r\n    Feed.find({feedTags: {$in: [new mongoose.Types.ObjectId(tagId)]}}, function(err, feeds){\r\n        if(err) throw err;\r\n        else\r\n            if(callback !== undefined) callback(feeds);\r\n    });\r\n};\r\n\r\nexports = module.exports = Reader;"]],"start1":0,"start2":0,"length1":0,"length2":6721}]],"length":6721,"saved":false}
{"contributors":[],"silentsave":false,"ts":1369895286198,"patch":[[{"diffs":[[0,"b://"],[-1,"localhost/rss"],[1,"bl-lia:traviata61253@dharma.mongohq.com:10067/feed"],[0,"reader"],[1,"db"],[0,"');\r"]],"start1":147,"start2":147,"length1":27,"length2":66}]],"length":6760,"saved":false}
